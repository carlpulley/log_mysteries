<% content_for :title do %>
	Server Loading Estimate: Newsfeed Requests
<% end %>

<% content_for :data do %>
<%
	def map_to_hash(data)
	  data.map { |d| { :id => d.id, :observed_at => d.observed_at.to_f, :observed_at_str => d.observed_at.in_time_zone('Pacific Time (US & Canada)').strftime("%d/%b/%Y %H:%M:%S %z"), :response_size => d.bytes, :processing_time => d.processing_time } }
	end
-%>
	<script>
		var raw_data = <%=raw (map_to_hash @data).to_json %>;
	</script>
<% end %>

<% content_for :note do %>	
	<h3>plot of event creation time (seconds from epoch) vs processing time (micro seconds)</h3>
	
	<script>
		var _mean = mean(raw_data.map(function(d) { return d.processing_time; }))/Math.pow(10, 6);
		var stddev = standard_deviation(raw_data.map(function(d) { return d.processing_time; }))/Math.pow(10, 6);
		var averg = average(raw_data.map(function(d) { return d.processing_time; }))/Math.pow(10, 6);
		var max_load = raw_data.map(function(d) { return d.processing_time; }).inject(0, function(m, n) { return Math.max(m, n); })/Math.pow(10, 6);
		var upper_time_bound = Math.max(_mean+stddev, averg+stddev);
		var upper_bound_color = "#FF2D26";
		document.observe("dom:loaded", function() {
			$$(".upper_bound_color").each(function(e) { e.setStyle({color:upper_bound_color}); });
		});
	</script>
	
	<script type="text/javascript+protovis">	
		var data = raw_data.map(function(d) { var h = {}; h['x'] = d['observed_at']; h['y'] = d['processing_time']; return h; });
		
		<%= render :partial => '/graph/area.js' %>
	
		vis.add(pv.Rule)
			.bottom(y(upper_time_bound*Math.pow(10, 6)))
			.strokeStyle(upper_bound_color);
	
		xlabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));
		ylabel.text(function(d) (d/1000000)+" us");
	
		vis.render();
	</script>
	<p>
		<b>Notes:</b>
		<ul>
			<li>Here our mean processing time is <script>document.write(_mean.toFixed(1));</script> seconds (standard deviation is <script>document.write(stddev.toFixed(1));</script> seconds) and our average is <script>document.write(averg.toFixed(1));</script> seconds.</li>
			<li>Thus, any processing times that are greater than <script>document.write(upper_time_bound.toFixed(1));</script> seconds indicates when the server is being loaded. This cut off point has been plotted as a <font class="upper_bound_color">red</font> line on the above graph.</li>
			<li>We know from our unit tests that each of these HTTP GET requests and responses are probably identical (this is based on the URLs being identical and the response body sizes being identical). As a result, our expectation is that, under ideal conditions (ie. with network latency and server load remaining constant), our processing_time attribute should be constant. Clearly, this is not the case here! As a result, if we assume no network latency, then we gain an estimate of server loading.</li>
			<li>The following features of this graph are worth noting (as they are indicators that are further consistent with server loading):
				<ul>
					<li>the largest peak is <script>document.write((max_load/upper_time_bound).toFixed(1));</script> times larger than our expected upper time bound (ie. the <font class="upper_bound_color">red</font> line)</li>
					<li>notice how we have repeated requests before time indexes 19/Apr/2010 19:00:00 and 22/Apr/2010 16:26:40 that result in increasing processing times</li>
					<li>the following log events indicate when the server appears to be experiencing higher than expected loading:
						<%= render :partial => 'data', :locals => { :data => ApacheAccess.tagged_with(["loading", "rss"]).all } %>
					</li>
				</ul>
			</li>
		</ul>
	</p>
<% end %>

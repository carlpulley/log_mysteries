<h1>News Feed Data Analysis</h1>

<h2>Overview</h2>

<p>Unit testing demonstrates that news feeds can be uniquely identified using either: the user agent string <i>Apple-PubSub</i>; or the URL <i>/feed/</i>.</p>

<p>According to <%= link_to "What is my IP address?", "http://whatismyipaddress.com" %>, the IP address 208.80.69.74 originates from California, USA and is not present on any blacklist.</p>
	
<h2>Graphs</h2>

<h3>plot of event order (array position) vs log event timestamp (seconds)</h3>
<% data = @log_events.select(["apache_accesses.id", "apache_accesses.observed_at"]).all.map_with_index { |d, i| { :x => i, :y => d.observed_at.to_f, :id => d.id } } %>
<script type="text/javascript+protovis">	
	var data = <%=raw data.to_json %>;
	
	<%= render :partial => '/graph/area.js' %>
	
	ylabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<%
			grad1 = data[2][:y] - data[1][:y]
			grad2 = data[4][:y] - data[3][:y]
			grad3 = data[6][:y] - data[5][:y]
			grad4 = data[8][:y] - data[7][:y]
			grad5 = data[10][:y] - data[9][:y]
			grad6 = data[12][:y] - data[11][:y]
			
			mean = mean([grad1, grad2, grad3, grad4, grad5, grad6])
			stddev = standard_deviation([grad1, grad2, grad3, grad4, grad5, grad6])
		%>
		<li>From the graph we can visually see a number of clear patterns: every news feed access/refresh occurs twice (see <%= link_to "RSS Analysis: 65.88.2.5", "/research/web_server/rss/65.88.2.5" %> for more information on this behaviour); the accesses occur with a regular periodicity.</li>
		<li>By examining our graph data we are able to calculate:
			<ul>
				<li>between event indexes 1 and 2 we have a gradient of <%= grad1 %></li>
				<li>between event indexes 3 and 4 we have a gradient of <%= grad2 %></li>
				<li>between event indexes 5 and 6 we have a gradient of <%= grad3 %></li>
				<li>between event indexes 7 and 8 we have a gradient of <%= grad4 %></li>
				<li>between event indexes 9 and 10 we have a gradient of <%= grad5 %></li>
				<li>between event indexes 11 and 12 we have a gradient of <%= grad6 %></li>
				<li>Thus, we get mean gradient of <%= mean %> and a standard deviation of <%= stddev %></li>
				<li>Whence we have that our RSS feed refresh rate is estimated as being once every <%= number_with_precision(mean/60, :precision => 2) %>Â±<%= number_with_precision(stddev/60, :precision => 2) %> minutes.</li>
			</ul>
		</li>
	</ul>
</p>
	
<h3>plot of event creation time (seconds from epoch) vs processing time (micro seconds)</h3>

<% data = @log_events.select(["apache_accesses.observed_at", :processing_time]).order("apache_accesses.observed_at").all.map { |d| { :x => d.observed_at.to_f, :y => d.processing_time } } %>

<%
	mean = mean(data.map { |d| d[:y] })/(10**6)
	stddev = standard_deviation(data.map { |d| d[:y] })/(10**6)
	averg = average(data.map { |d| d[:y] })/(10**6)
	max_load = data.map { |d| d[:y] }.max/(10**6)
	upper_time_bound = [mean+stddev, averg+stddev].max
	upper_bound_color = "#B3C6FF"
%>

<script type="text/javascript+protovis">	
	var data = <%=raw data.to_json %>;
	
	<%= render :partial => '/graph/area.js' %>

	vis.add(pv.Rule)
		.bottom(y(<%= upper_time_bound*(10**6) %>))
		.strokeStyle(<%=raw upper_bound_color.to_json %>);

	xlabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));
	ylabel.text(function(d) (d/1000000)+" &mu;s");

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<li>Here our mean processing time is <%= mean %> seconds (standard deviation is <%= stddev %> seconds) and our average is <%= averg %> seconds.</li>
		<li>Thus, any processing times that are greater than <%= number_with_precision(upper_time_bound, :precision => 0) %> seconds indicate when the server is being loaded. This cut off point has been plotted as a <font color="<%= upper_bound_color %>">blue</font> line on the above graph.</li>
		<li>The following features of this graph are worth noting:
			<ul>
				<li>the largest peak is <%= number_with_precision(max_load/upper_time_bound, :precision => 1) %> times larger than our expected upper time bound (ie. the <font color="<%= upper_bound_color %>">blue</font> line)</li>
				<li>notice how we have repeated requests at each time index that result in increasing processing times</li>
			</ul>
		</li>
	</ul>
</p>
	
<h2>Appendix</h2>

<%= link_to "Data Set (CSV)", "/research/by.csv?#{params.keys.select { |k| ["ip_address", "user_agent", "tagged"].member? k }.map { |k| [k, params[k]].join("=") }.concat(["ip_address=#{params[:subsection]}", "tagged=rss"]).join("&") }" %>

<% content_for :data do %>
	<%
		def trie_keys
			hash_compressed = {}
			hash_full = {}
			@data.all.each do |data|
				path_prefix = data.http_url.split("?").first
				labels = path_prefix.split("/")
				labels.each do |d|
					prefix = labels[0..(labels.index(d))].join("/")
					prefix = "/" if prefix.blank?
					hash_full[prefix] = number_with_precision(100*@data.url(prefix).count.to_f/@data.count, :precision => 1).to_f unless hash_full.keys.member? prefix
				end
				hash_full[path_prefix] = number_with_precision(100*@data.url(path_prefix).count.to_f/@data.count, :precision => 1).to_f
				unless hash_compressed.keys.member? path_prefix or not hash_compressed.keys.select { |k| k.index(path_prefix) == 0 }.empty?
					key_prefixes = hash_compressed.keys.select { |k| k != path_prefix and path_prefix.index(k) == 0 }
					key_prefixes.each { |k| hash_compressed.delete k } 
					hash_compressed[path_prefix] = hash_full[path_prefix]
				end
			end
			[hash_compressed, hash_full]
		end

		def map_to_hash(data)
			trie_keys.first.map { |k,v| { :label => k, :frequency => v } }
		end
	-%>
		<script>
			var raw_data = <%=raw (map_to_hash @data).to_json %>;
			var full_raw_data = <%=raw trie_keys.last.map { |k,v| { :label => k, :frequency => v } }.to_json %>;
			var blue = "#897EFF";
			var red = "#FF5254";
		</script>
<% end %>

<% content_for :note do %>
	<h3>URL Path-prefix Tree (node colour is % frequency count on a logarithm scale)</h3>

	<script type="text/javascript+protovis">
	    var root = "";
	    var tree_data = pv.dom(pv.tree(raw_data).keys(function(d) d.label.split("/")).value(function(d) d.frequency).map()).nodes(); 
		<% # FIXME: surely there is a better way of building up our tree than this!? -%>
		function absolute_path(d) {
			var result = [];
			var ptr = d;
			do {
				result.push(ptr.nodeName);
			} while(ptr = ptr.parentNode);
			result.reverse();
			var result_path = result.compact().join("/");
			return result_path == "" ? "/" : result_path;
		}
		var data = tree_data.map(function(d) { if (tree_data.first() != d) { d.nodeValue = (d.nodeValue || full_raw_data.select(function(x) { return x.label == absolute_path(d); }).first().frequency); }; return d; } );
		var min_freq = full_raw_data.map(function(d) { return d.frequency; }).min();
		var c = pv.Scale.log(min_freq, 100).range(blue, red);
    
		<%= render :partial => "/graph/dendrogram.js" %>
        
		vis.height(700).width(700).bottom(10).left(20);
        
		dot.fillStyle(function(n) c(n.nodeValue || 0));
        
		label.text(function(n) n.lastChild ? (n.nodeName == "" ? "/" : n.nodeName) : n.nodeName+" ("+n.nodeValue+"%)");
        
		vis.render();
	</script>
	
	<p><b>Observations:</b>
		<ul>
			<li>58.0% of all traffic is for <code>/feed/</code> (an RSS news feed?)</li>
			<li>32.2% of all traffic is for <code>/wp-content/</code> (Wordpress?)</li>
			<li>10.2% of all traffic is for <code>/wp-content/plugins/</code> (the Wordpress plugins: Contact Form 7; Google Analytocator; and Google Syntax Highlighter?)</li>
			<li>1.1% of all traffic is for <code>/wp-includes/</code> (Wordpress?)</li>
		</ul>
	</p>
<% end %>
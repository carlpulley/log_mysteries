<h1>News Feed Data Analysis</h1>

<h2>Overview</h2>

<p>Unit testing demonstrates that news feeds can be uniquely identified using either: the user agent string <i>Apple-PubSub</i>; or the URL <i>/feed/</i>.</p>
	
<p>According to <%= link_to "What is my IP address?", "http://whatismyipaddress.com" %>, the IP address 65.88.2.5 originates from Massachusetts, USA and is present on the following blacklists:
	<ul>
		<li><%= link_to "Spam and Open Relay Blocking System ", "http://whatismyipaddress.com/blacklist/sorbs" %></li>
		<li><%= link_to "Barracuda Reputation Block List", "http://whatismyipaddress.com/blacklist/barracudacentral" %></li>
		<li><%= link_to "Composite Blocking List", "http://whatismyipaddress.com/blacklist/cbl" %></li>
		<li><%= link_to "Spamhaus Exploit blacklist", "http://whatismyipaddress.com/blacklist/spamhaus" %></li>
		<li><%= link_to "Abusive Hosts Blocking List", "http://whatismyipaddress.com/blacklist/surriel" %></li>
	</ul>
</p>

<p>The double fetches here are consistent with the server not setting the character encoding in the Content-Type HTTP response header and the client using Firefox 3.x to access this RSS feed.</p>

<h2>Graphs</h2>

<h3>plot of event order (array position) vs log event timestamp (seconds)</h3>
<% data = @log_events.select(["log_events.id", "log_events.observed_at"]).all.map_with_index { |d, i| { :x => i, :y => d.observed_at.to_f, :id => d.id } } %>
<script type="text/javascript+protovis">	
	var data = <%=raw data.to_json %>;
	
	<%= render :partial => 'report/graph/area.js' %>
	
	ylabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<li>From the graph we can visually see that every news feed access/refresh occurs twice (if this feature is judged to be sufficiently unusual, we could use it to fingerprint client software). 
			<ul>
				<li>Empty link or img HTML tags resolve to the current page and so can result in double fetches</li>
				<li>Javascript generated HTML can often result in double fetches</li>
				<li>Googling on the terms <%= link_to "firefox double fetch get request", "http://www.google.co.uk/search?q=firefox+double+fetch+get+request" %> turns up the following link <%= link_to "Firefox loads my page 5 times", "http://forums.mozillazine.org/viewtopic.php?f=25&t=1971947" %> from where we locate the following potential explanations:
					<ul>
						<li>empty src attributes in a page or empty url() values in the CSS apparently cause this type of behaviour in Firefox</li>
						<li>inconsistent character encoding (eg. page meta tag and server headers specify differing character encodings) - see <%= link_to "Bug 236858 - Repeating GET requests", "https://bugzilla.mozilla.org/show_bug.cgi?id=236858" %></li>
					</ul>
				</li>
			</ul>
			We do not see this issue with other client requests, so we're led to believe the issue is more IP/user agent specific and so related to inconsistent character encoding - ie. server is not communicating the character set encoding in the Content-Type response HTTP header. Comparing our IP address against user agent strings allows us to conclude that this RSS feed is probably being accessed via a Firefox browser.
		</li>
		<li>The changing gradients are suggestive of a more manually influenced update regime being applied here.</li>
	</ul>
</p>
	
<h3>plot of event creation time (seconds from epoch) vs processing time (micro seconds)</h3>

<% data = @log_events.select(["log_events.observed_at", :processing_time]).order("log_events.observed_at").all.map { |d| { :x => d.observed_at.to_f, :y => d.processing_time } } %>

<%
	mean = mean(data.map { |d| d[:y] })/(10**6)
	stddev = standard_deviation(data.map { |d| d[:y] })/(10**6)
	averg = average(data.map { |d| d[:y] })/(10**6)
	max_load = data.map { |d| d[:y] }.max/(10**6)
	upper_time_bound = [mean+stddev, averg+stddev].max
	upper_bound_color = "#B3C6FF"
%>

<script type="text/javascript+protovis">	
	var data = <%=raw data.to_json %>;
	
	<%= render :partial => 'report/graph/area.js' %>

	vis.add(pv.Rule)
		.bottom(y(<%= upper_time_bound*(10**6) %>))
		.strokeStyle(<%=raw upper_bound_color.to_json %>);

	xlabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));
	ylabel.text(function(d) (d/1000000)+" &mu;s");

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<li>Here our mean processing time is <%= mean %> seconds (standard deviation is <%= stddev %> seconds) and our average is <%= averg %> seconds.</li>
		<li>Thus, any processing times that are greater than <%= number_with_precision(upper_time_bound, :precision => 0) %> seconds indicate when the server is being loaded. This cut off point has been plotted as a <font color="<%= upper_bound_color %>">blue</font> line on the above graph.</li>
		<li>The following features of this graph are worth noting:
			<ul>
				<li>the largest peak is <%= number_with_precision(max_load/upper_time_bound, :precision => 1) %> times larger than our expected upper time bound (ie. the <font color="<%= upper_bound_color %>">blue</font> line)</li>
				<li>notice how we have repeated requests at each time index that result in increasing processing times</li>
			</ul>
		</li>
	</ul>
</p>
	
<h2>Appendix</h2>

<h3>Log Events with IP Address <%= params[:subsection] %> and tagged rss</h3>

<%= render :partial => 'appendix', :locals => { :log_events => @log_events.ip_address(params[:subsection]).tagged_with("rss") } %>

<h1>Honeynet Challenge: Log Mysteries</h1>
<h3>by Dr. Carl Pulley</h3>

<p>This partial analysis of <%= link_to "santized_log.zip", "http://honeynet.org/challenges/2010_5_log_mysteries" %> arose out of an attempt at the Log Mysteries Honeynet challenge (unfortunately teaching workloads stopped any chance of a realistic challenge submission by the author!). The author's partial attempt was then refined into an exercise to see how much of the challenge could be solved by <b>just</b> examining data within <%= link_to "santized_log.zip", "http://honeynet.org/challenges/2010_5_log_mysteries" %> that was <b>only</b> related to the Apache process - this meant that the author intentionally restricted their analysis to just the Apache2 web logs (ie. <code>apache2/*.log</code>) and the sudo events within <code>auth.log</code> (eg. via <code>grep sudo auth.log</code>).</p>

<p>Throughout the analysis, we are attempting to follow the scientific method (eg. see the <%= link_to "Handbook of Digital Forensics and Investigation", "http://www.elsevierdirect.com/product.jsp?isbn=9780123742674" %> by Eoghan Casey) and to utilise data visualisation techniques (eg. see <%= link_to "Applied Security Visualisation", "http://www.informit.com/store/product.aspx?isbn=0321510100" %> by Raffael Marty and <%= link_to "Security Data Visualisation", "http://nostarch.com/securityvisualization.htm" %> by Greg Conti) to mine our (restricted) data set for as much forensic data as is realistically possible.</p>

<p>In addition to our attempt at answering this challenge (see below), we have also provided access to our investigative or research <%= link_to "notes", "/research" %>. IMHO, our self-imposed data restrictions make these research <%= link_to "notes", "/research" %> better reading than our challenge answers!</p>

<p>We have chosen here to build a Rails 3 application (running on top of Ruby 1.9.2 RC2 within a RVM environment) to offer a visual and interactive web report. All report graphing is performed using <%= link_to "Protovis 3.2", "http://vis.stanford.edu/protovis/" %>. All analysis has been performed using an Ubuntu 10.04 operating system. We have made the code for this application available on <%= link_to "GitHub", "http://github.com/carlpulley/log_mysteries" %>.</p>

<p>All log data has been parsed and processed using Rake tasks and then loaded into various Rail's models (eg. for each log file, we have an associated model). The author has found that ActiveSupport provides an excellent platform by which one may slice and dice the data sets for further examination, exploration and analysis.</p>
	
<p>The automatic generation of CSV data in the research appendices allows readers to independently analyse data sets outside of this Rails application.</p>

<p>Currently, we have used unit testing (via <%= link_to "shoulda", "http://github.com/thoughtbot/shoulda" %>) to perform any hash based verification of downloaded files. Integration testing is used to ensure that all downloadable files (ie. CSV data sets) are identical to those used in producing the original report. In doing this, we are trying to ensure that our results (and so conclusions) are verifiably repeatable by other parties.</p>
	
<h3>Challenge Answers</h3>

<ol>
	<li><i>Was the system compromised and when? How do you know that for sure?</i> <br />
		We believe that the system was initially compromised before 23:21:08 on the 19th April 2010 PDT. This assertion is based on: 
		<ul>
			<li>the presence of the <code>psybnc</code> and <code>eggdrop</code> sudo entries in <code>auth.log</code> - both of these tools are known IRC bot components (see <%= link_to "botnet events", "/research/by?tagged=botnet" %>);</li>
			<li>the non-standard username <code>dhg</code> - all other usernames match the pattern <code>user\d+</code> (see <%= link_to "odd user events", "/research/by?tagged=odd,user" %>);</li>
			<li>the fact that <code>auth.log</code> records the user <code>dhg</code> configuring the UFW firewall and then IP Tables directly at a time that is during a period when the server is estimated to have no ongoing maintenance (see <%= link_to "firewall events", "/research/by?tagged=firewall" %> and <%= link_to "maintenance timeline", "/research/maintenance" %>).</li>
		</ul>
		By examining our installation events (see <%= link_to "install events", "/research/by?tagged=install" %>), we have that our system was possibly compromised before 23:02:37 on the 19th April 2010 PDT (since root installed the Debian package <code>build-essential</code> at this time and this event occurs 23 minutes before botnet related activity).<br />
		By examining our <%= link_to "subversion events", "/research/by?tagged=subversion" %> (we assume here that only legitimate administrator activity is associated with these events), we see that 17:27:36 on the 19th April 2010 is the last point at which legitimate administrator activity occurs on the 19th April 2010.<br />
		As a result of the above, we estimate that the system was compromised somewhere between 17:27:36 and 23:02:37 on the 19th April 2010.
<% timeline1 = ApplicationHelper::Timeline.new %>

<% timeline1.add_event("subversion events", Sudo.tagged_with("subversion")) %>
<% timeline1.add_event("maintenance events", Sudo.tagged_with("maintenance")) %>
<% timeline1.add_event("install/build events", Sudo.tagged_with("install")) %>
<% timeline1.add_event("apache2 events", Sudo.tagged_with("apache")) %>
<% timeline1.add_event("firewall events", Sudo.tagged_with("firewall")) %>
<% timeline1.add_event("botnet events", Sudo.tagged_with("botnet")) %>
<% timeline1.add_event("suspicious user events", Sudo.tagged_with(["odd", "user"])) %>

<%= render :partial => '/graph/timeline', :object => timeline1 %>
	</li>
	<li><i>If the system was compromised, what was the method used?</i><br />
		?</li>
	<li><i>Can you locate how many attackers failed? If some succeeded, how many were they? How many stopped attacking after the first success?</i><br />
		?</li>
	<li><i>What happened after the brute force attack?</i><br />
		?</li>
	<li><i>Locate the authentication logs, was a bruteforce attack performed? If yes how many?</i><br />
<% timeline2 = ApplicationHelper::Timeline.new %>

<% timeline2.add_event("server loading: transfer speed", ApacheAccess.tagged_with("TODO")) %>
<% timeline2.add_event("server loading: static files", ApacheAccess.tagged_with("TODO")) %>
<% timeline2.add_event("server loading: newsfeed access", ApacheAccess.tagged_with("TODO")) %>
<% timeline2.add_event("server loading: out of order events", ApacheAccess.tagged_with("TODO")) %>
<% timeline2.add_event("firewall events", Sudo.tagged_with("firewall")) %>
<% timeline2.add_event("botnet events", Sudo.tagged_with("botnet")) %>
<% timeline2.add_event("suspicious user events", Sudo.tagged_with(["odd", "user"])) %>

<%= render :partial => '/graph/timeline', :object => timeline2 %>
		
		If we take the view that a sustained brute force attack would result in resource consumption (and so observable server loading), then we may use a timeline plot of our various server loading estimates (see our <%= link_to "research notes", "/research" %>) to estimate when we think that any brute force attacks might have occurred.<br />
		This timeline analysis results in the following predictions for potential brute force attacks:
		<ul>
			<li>TODO: ??</li>
		</ul>
	</li>
	<li><i>What is the timeline of significant events? How certain are you of the timing?</i><br />
<% timeline3 = ApplicationHelper::Timeline.new %>
           
<% timeline3.add_event("10.0.1.14: POST /wp-cron.php?doing_wp_cron", ApacheAccess.ip_address("10.0.1.14").tagged_with("wordpress")) %>
           
<% timeline3.add_event("10.0.1.2: Apple-PubSub", ApacheAccess.ip_address("10.0.1.2").tagged_with("rss")) %>
<% timeline3.add_event("10.0.1.2: OSX 10.6; Firefox 3.6.3", ApacheAccess.ip_address("10.0.1.2").user_agent("Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3")) %>
<% timeline3.add_event("10.0.1.2: OSX 10.6; Safari 4.0.5", ApacheAccess.ip_address("10.0.1.2").user_agent("Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_2; en-us) AppleWebKit/531.22.7 (KHTML, like Gecko) Version/4.0.5 Safari/531.22.7")) %>
           
<% timeline3.add_event("65.88.2.5: Apple-PubSub", ApacheAccess.ip_address("65.88.2.5").tagged_with("rss")) %>
<% timeline3.add_event("65.88.2.5: OSX 10.6; Firefox 3.6.3", ApacheAccess.ip_address("65.88.2.5").user_agent("Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3")) %>
           
<% timeline3.add_event("208.80.69.74: Apple-PubSub", ApacheAccess.ip_address("208.80.69.74").tagged_with("rss")) %>
<% timeline3.add_event("208.80.69.69: OSX 10.6; Safari 4.0.4", ApacheAccess.ip_address("208.80.69.69")) %>
           
<% timeline3.add_event("76.191.195.140: Apple-PubSub", ApacheAccess.ip_address("76.191.195.140").tagged_with("rss")) %>
           
<% timeline3.add_event("123.4.59.174: Windows XP; IE 6.0", ApacheAccess.ip_address("123.4.59.174")) %>
<% timeline3.add_event("125.45.106.180: Windows XP; IE 6.0", ApacheAccess.ip_address("125.45.106.180")) %>
<% timeline3.add_event("123.4.59.21: Windows XP; IE 6.0", ApacheAccess.ip_address("123.4.59.21")) %>
<% timeline3.add_event("125.45.106.168: Windows XP; IE 6.0", ApacheAccess.ip_address("125.45.106.168")) %>
<% timeline3.add_event("123.4.42.80: Windows XP; IE 6.0", ApacheAccess.ip_address("123.4.42.80")) %>
<% timeline3.add_event("123.11.240.130: Windows XP; IE 6.0", ApacheAccess.ip_address("123.11.240.130")) %>
<% timeline3.add_event("123.4.51.181: Windows XP; IE 6.0", ApacheAccess.ip_address("123.4.51.181")) %>
           
<% timeline3.add_event("190.167.70.87: Windows XP; Chrome 4.1.249.1045", ApacheAccess.ip_address("190.167.70.87")) %>
<% timeline3.add_event("190.166.87.164: Windows XP; Chrome 4.1.249.1059", ApacheAccess.ip_address("190.166.87.164")) %>
           
<% timeline3.add_event("201.229.176.217: Windows XP; Firefox 3.0.19", ApacheAccess.ip_address("201.229.176.217")) %>
           
<% timeline3.add_event("Naverbot", ApacheAccess.tagged_with("bot")) %>
<% timeline3.add_event("World of Warcraft Scanning", ApacheAccess.tagged_with("world-of-warcraft,scan")) %>
<% timeline3.add_event("Proxy Scanning", ApacheAccess.tagged_with("proxy,scan")) %>
<% timeline3.add_event("Port 6677 Scanning", ApacheAccess.tagged_with("port-6677,scan")) %>
<% timeline3.add_event("Port 6667 Scanning", ApacheAccess.tagged_with("port-6667,scan")) %>
           
<% timeline3.add_event("server loading: transfer speed", ApacheAccess.tagged_with("TODO")) %>
<% timeline3.add_event("server loading: static files", ApacheAccess.tagged_with("TODO")) %>
<% timeline3.add_event("server loading: newsfeed access", ApacheAccess.tagged_with("TODO")) %>
<% timeline3.add_event("server loading: out of order events", ApacheAccess.tagged_with("TODO")) %>
<% timeline3.add_event("mod unique ID anomaly", ApacheAccess.tagged_with(["anomaly", "unknown"])) %>
<% timeline3.add_event("apache restart estimates", ApacheAccess.tagged_with("TODO")) %>
           
<% timeline3.add_event("subversion events", Sudo.tagged_with("subversion")) %>
<% timeline3.add_event("maintenance events", Sudo.tagged_with("maintenance")) %>
<% timeline3.add_event("install/build events", Sudo.tagged_with("install")) %>
<% timeline3.add_event("python events", Sudo.tagged_with("python")) %>
<% timeline3.add_event("apache2 events", Sudo.tagged_with("apache")) %>
<% timeline3.add_event("firewall events", Sudo.tagged_with("firewall")) %>
<% timeline3.add_event("botnet events", Sudo.tagged_with("botnet")) %>
<% timeline3.add_event("suspicious user events", Sudo.tagged_with(["odd", "user"])) %>
           
<%= render :partial => '/graph/timeline', :object => timeline3 %>
		
		Apache2 logging has here been configured to use mod unique ID. This means that each Apache2 log line may have its timestamp <%= link_to "verified", "/research/unknown" %> to some degree. Only one Apache2 log event is to be found with an inaccurate (ie. by more than ±1 second) mod unique ID field:
		<div class="events">
			<% ApacheAccess.tagged_with(["anomaly", "unknown"]).all.each do |event| %>
			<div class="event"><%= event.to_s %></div>
			<% end %>
		</div>
		and so, in the absence of a suitable explanation, we assume that this log entry has been tainted in some way. TODO: perform a taint analysis.<br />
		By exploiting the timing properties of predictable behaviour (eg. regular updates of RSS newsfeeds by <%= link_to "10.0.1.2", "/research/web_server/rss/10.0.1.2"%>), we can further measure the clock skew of the system clock. TODO: use 10.0.1.2 rss time to measure consistency of time in apache log files.
		</li>
	<li><i>Anything else that looks suspicious in the logs? Any misconfigurations? Other issues?</i><br />
		TODO: ??</li>
	<li><i>Was an automatic tool used to perform the attack? If yes which one?</i><br />
		?</li>
	<li><i>What can you say about the attacker's goals and methods?</i><br />
		The presence of <code>eggdrop</code> and <code>psybnc</code> suggest that the attacker(s) plan to use this system as part of a botnet.</li>
</ol>

<p><b>Bonus:</b> <i>What would you have done to avoid this attack?</i><br />
?</p>

<h1>News Feed Data Analysis</h1>

<script>
	var raw_data = <%=raw @data.to_json %>;
</script>

<h2>Overview</h2>

<p>Unit testing demonstrates that news feeds can be uniquely identified using either: the user agent string <i>Apple-PubSub</i>; or the URL <i>/feed/</i>.</p>
	
<h3>IP Addresses</h3>

<p>Grouping our IP Address data using country codes, ASN numbers and IP address subnets provides us with the following structured network diagram (leaf node colour encodes the frequency of requests via a logarithmic heat scale):
<center>
<% # TODO: add in some events so that label clicks map to /research/by?ip_address=#{label} -%>
<script type="text/javascript+protovis">
	var root = "";
	var data = pv.nest(raw_data).key(function(d) d.cc).key(function(d) d.asn).key(function(d) d.ip_address.split(".")[0]).key(function(d) d.ip_address.split(".")[1]).key(function(d) d.ip_address.split(".")[2]).key(function(d) d.ip_address.split(".")[3]).key(function(d) d.ip_address).sortKeys().rollup(function(v) v.first().request_count);

	<%= render :partial => '/graph/dendrogram.js' %>

	vis.height(500).width(1000).bottom(100).top(20);

	layout.orient("top");

	dot.fillStyle(function(n) n.firstChild ? "#aec7e8" : pv.Scale.log(<%= @data.map{ |d| d[:request_count] }.min %>, <%= @data.map{ |d| d[:request_count] }.max %>).range('blue', 'red')(n.nodeValue));
	
	label.text(function(n) n.firstChild ? (n.depth*7 >= 3 ? "/"+(8*(n.depth*7-2)) : (n.nodeName != "" && n.depth*7 >= 2 ? "ASN: "+n.nodeName : n.nodeName)) : n.nodeName);
	
	vis.render();
</script>
</center>

<h3>IP Address Blacklisting</h3>

<ul>
<% @data.map { |d| d[:ip_address] }.uniq.sort.each do |ip_address| %>
	<% if IpAddress.where(:value => ip_address).first.blacklists.empty? %>
	<li><%= ip_address %> not listed on any blacklists</li>
	<% else %>
	<li><%= ip_address %> listed on:
		<ul>
			<% IpAddress.where(:value => ip_address).first.blacklists.each do |blacklist| %>
			<li><%= link_to blacklist.site, blacklist.reference %></li>
			<% end %>
		</ul>
	</li>
	<% end %>
<% end %>
</ul>

<p>The double fetches here are consistent with the server not setting the character encoding in the Content-Type HTTP response header and the client using Firefox 3.x to access this RSS feed.</p>

<h2>Graphs</h2>

<h3>plot of event order (array position) vs log event timestamp (seconds)</h3>

<script type="text/javascript+protovis">	
	var data = raw_data.map(function(d) { var h = {}; h['x'] = d['position']; h['y'] = d['observed_at']; return h; });
	
	<%= render :partial => '/graph/area.js' %>
	
	ylabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<li>From the graph we can visually see that every news feed access/refresh occurs twice (if this feature is judged to be sufficiently unusual, we could use it to fingerprint client software). 
			<ul>
				<li>Empty link or img HTML tags resolve to the current page and so can result in double fetches</li>
				<li>Javascript generated HTML can often result in double fetches</li>
				<li>Googling on the terms <%= link_to "firefox double fetch get request", "http://www.google.co.uk/search?q=firefox+double+fetch+get+request" %> turns up the following link <%= link_to "Firefox loads my page 5 times", "http://forums.mozillazine.org/viewtopic.php?f=25&t=1971947" %> from where we locate the following potential explanations:
					<ul>
						<li>empty src attributes in a page or empty url() values in the CSS apparently cause this type of behaviour in Firefox</li>
						<li>inconsistent character encoding (eg. page meta tag and server headers specify differing character encodings) - see <%= link_to "Bug 236858 - Repeating GET requests", "https://bugzilla.mozilla.org/show_bug.cgi?id=236858" %></li>
					</ul>
				</li>
			</ul>
			We do not see this issue with other client requests, so we're led to believe the issue is more IP/user agent specific and so related to inconsistent character encoding - ie. server is not communicating the character set encoding in the Content-Type response HTTP header. Comparing our IP address against user agent strings allows us to conclude that this RSS feed is probably being accessed via a Firefox browser.
		</li>
		<li>The changing gradients are suggestive of a more manually influenced update regime being applied here.</li>
	</ul>
</p>
		
<h2>Appendix</h2>

<%= link_to "Data Set (CSV)", "/research/by.csv?#{params.keys.select { |k| ["ip_address", "user_agent", "tagged"].member? k }.map { |k| [k, params[k]].join("=") }.concat(["ip_address=#{params[:subsection]}", "tagged=rss"]).join("&") }" %>

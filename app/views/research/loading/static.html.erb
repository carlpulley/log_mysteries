<h2>Server Loading Estimate: Static File Requests</h2>

<script>
	var raw_data = <%=raw @data.to_json %>;
</script>
	
<h3>plot of event creation time (seconds from epoch) vs transfer speed (MB per second)</h3>

<%
	mean = mean(@data.map { |d| d[:transfer_speed] })
	stddev = standard_deviation(@data.map { |d| d[:transfer_speed] })
	averg = average(@data.map { |d| d[:transfer_speed] })
	max_load = @data.map { |d| d[:transfer_speed] }.max
	upper_time_bound = [mean+stddev, averg+stddev].max
	upper_bound_color = "#FF2D26"
%>

<script type="text/javascript+protovis">	
	var data = raw_data.map(function(d) { var h = {}; h['x'] = d['observed_at']; h['y'] = d['transfer_speed']; return h; });
	
	<%= render :partial => '/graph/area.js' %>

	vis.add(pv.Rule)
		.bottom(y(<%= upper_time_bound %>))
		.strokeStyle(<%=raw upper_bound_color.to_json %>);

	xlabel.text(function(d) pv.Format.date("%d/%b/%y %H:%M:%S")(new Date(d*1000)));
	ylabel.text(function(d) (d)+" MB/s");

	vis.render();
</script>
<p>
	<b>Notes:</b>
	<ul>
		<li>Here our mean transfer speed is <%= number_with_precision mean, :precision => 1 %> MB/s (standard deviation is <%= number_with_precision stddev, :precision => 1 %> MB/s) and our average is <%= number_with_precision averg, :precision => 1 %> MB/s.</li>
		<li>Thus, any transfer speeds that are greater than <%= number_with_precision(upper_time_bound, :precision => 1) %> MB/s indicates when the server is being loaded. This cut off point has been plotted as a <font color="<%= upper_bound_color %>">red</font> line on the above graph.</li>
		<li>The following features of this graph are worth noting (as they are indicators that are further consistent with server loading):
			<ul>
				<li>the largest peak is <%= number_with_precision(max_load/upper_time_bound, :precision => 1) %> times larger than our expected upper time bound (ie. the <font color="<%= upper_bound_color %>">red</font> line)</li>
				<li>the following log events indicate when the server appears to be experiencing higher than expected loading:
					<%= render :partial => 'data', :locals => { :data => ApacheAccess.where(["id in (?)", @data.select { |d| d[:transfer_speed] >= upper_time_bound }.map { |d| d[:id] }]).all } %>
				</li>
			</ul>
		</li>
	</ul>
</p>

<h3>Appendix</h3>

<%= link_to "Data Set (CSV)", "/research/loading/static.csv" %>
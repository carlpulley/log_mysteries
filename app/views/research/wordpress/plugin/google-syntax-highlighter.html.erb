<% content_for :title do %>
	WordPress Plugin Analysis: Google Syntax Highlighter
<% end %>

<% content_for :data do %>
<%
	def map_to_hash(data)
	  data.map { |m| { :request_method => m.apache_access.http_method, :request_name => m.apache_access.http_url, :request_size => m.apache_access.bytes, :request_status => m.apache_access.result, :archive_name => m.archive_content.name, :archive_size => m.archive_content.size, :partial_match => m.tag_list.member?("basename") } }
	end
-%>
	<script>
		var raw_data = <%=raw (map_to_hash @data).to_json %>;
		var raw_full_data = <%=raw (map_to_hash @data).select { |d| not d[:partial_match] }.to_json %>;
		var raw_partial_data = <%=raw (map_to_hash @data).select { |d| d[:partial_match] }.to_json %>;
	</script>
<% end %>

<% content_for :note do %>
	<p>Examination of the <%= github_link "lib/tasks/apache_access/tag_versions.rake", "ver" %> parameter string for log entries tagged with <%= link_to "google-syntax-highlighter", "/research/by?tagged=google-syntax-highlighter,version" %> does not reveal anything regarding this plugin's version number.</p>
	
	<p>By Googling with the keywords <%= link_to "wordpress plugin google-syntax-highlighter", "http://google.co.uk/search?q=wordpress+plugin+google-syntax-highlighter" %>, we are able to locate the <%= link_to "Google Syntax Highlighter", "http://wordpress.org/extend/plugins/google-syntax-highlighter/" %> plugin.</p>
	
	<p>According to the Google Syntax Highlighter plugin web page, this plugin was last updated on the 14<sup>th</sup> August 2007. As a result, we are led to believe that this plugin is probably at version 1.5.1 since all our ApacheAccess events occur with the logged year dates: <%= ApacheAccess.all.map { |d| d.observed_at.year }.uniq.join("; ") %>.</p>
	
	<p><%= github_link "lib/tasks/google_syntax_highlighter.rake", "Downloading" %> (<%= github_link "test/unit/google_syntax_highlighter_test.rb", "verification" %>) version 1.5.1 of Google Syntax Highlighter then allows us to match (see <%= github_link "lib/tasks/archive/add_url_names.rake" %> and <%= github_link "lib/tasks/archive/add_url_basenames.rake" %>) (<%= github_link "test/unit/csv/report_google_analyticator_test.rb", "verification" %>) the contents of the resulting archive against instances of the ApacheAccess model.</p>
	
	<p>This archive is found to contain the following information within its index:
	<pre>
	<%= GoogleSyntaxHighlighter.all.map { |d| d.to_s }.join("\n") %>
	</pre>
	</p>
	
	<p>URLs that are present in both the ApacheAccess model and version 1.5.1 of the downloaded Google Syntax Highlighter archive are as follows:
		<ul>
			<li>
			<% full_matches = @data.select { |d| not d[:partial_match] }.map { |d| d[:archive_name] }.uniq %>
			<%= "No URL matches found" if full_matches.empty? %>
			<% unless full_matches.empty? %>
			Full URL matches:
				<ul>
				<% full_matches.each do |url| %>
					<li><i><%= url %></i></li>
				<% end %>
				</ul>
			<% end %>
			</li>
			<li>
			<% partial_matches = @data.select { |d| d[:partial_match] }.map { |d| d[:archive_name] }.uniq %>
			<%= "No partial (ie. basename) URL matches found" if partial_matches.empty? %>
			<% unless partial_matches.empty? %>
			Partial (ie. basename) URL matches:
				<ul>
				<% partial_matches.each do |url| %>
					<li><i><%= url %></i></li>
				<% end %>
				</ul>
			<% end %>
			</li>
		</ul>
	</p>
	
	<p>FIXME: Those URLs that are tagged with google-syntax-highlighter and that do not appear within version 1.5.1 of the downloaded <%= link_to "Google Syntax Highlighter", "http://wordpress.org/extend/plugins/google-syntax-highlighter/" %> plugin are as follows:
		<ul>
			< % @anomalies[:google_syntax_highlighter].each do |collect| %>
				< % collect.group(:http_url).all.each do |event| %>
				<li><i>< %= event.http_url %></i></li>
				< % end %>
			< % end %>
		</ul>
	</p>
	
	<p>Plotting a bar graph of plugin file and URL file against number of bytes in the respective file (see below), allows a cross-view analysis to be performed. This analysis shows that the files:
		<ul>
			<% @data.map { |d| d[:archive_name] }.uniq.each do |filename| %>
				<li><i><%= filename %></i></li>
			<% end %>
		</ul>
	have sizes consistent with the downloaded plugin whenever we have a successful (ie. a HTTP 200 response) GET request. As redirects simply return a header with an empty body (ie. 0 bytes in size), our size inconsistencies with redirect responses (ie. HTTP 304 responses) can be explained.
	</p>
	
	TODO: add in tests to verify above assertions
	
	<h2>Full Matching: plugin file and URL file (file names) vs. file size (bytes)</h2>
	
	<h2>Full Matching: plugin file and URL file (file names) vs. file size (bytes)</h2>
	
	<script type="text/javascript+protovis">
		var labels = raw_full_data.map(function(d) d.request_method+" "+d.request_name+": "+d.request_status);
		var data = raw_full_data.map(function(d) [d.archive_size, d.request_size]);
		
		<%= render :partial => '/graph/bar.js' %>
	
		vis.render();
	</script>
	
	<h2>Partial Matching: plugin file and URL file (file names) vs. file size (bytes)</h2>
	
	<script type="text/javascript+protovis">
		var labels = raw_partial_data.map(function(d) d.request_method+" "+d.request_name+": "+d.request_status+" =?= "+d.archive_name);
		var data = raw_partial_data.map(function(d) [d.archive_size, d.request_size]);
		
		<%= render :partial => '/graph/bar.js' %>
	
		vis.render();
	</script>
<% end %>

<h1>Honeynet Challenge: Log Mysteries</h1>
<h3>by Dr. Carl Pulley</h3>

<p>This partial analysis of <%= link_to "santized_log.zip", "http://honeynet.org/challenges/2010_5_log_mysteries" %> arose out of an attempt at the Log Mysteries Honeynet challenge (unfortunately teaching workloads stopped any chance of a realistic challenge submission by the author!). The author's partial attempt was then refined into an exercise to see how much of the challenge could be solved by <b>just</b> examining data within <%= link_to "santized_log.zip", "http://honeynet.org/challenges/2010_5_log_mysteries" %> that was <b>only</b> related to the Apache process - this meant that the author intentionally restricted their analysis to just the Apache2 web logs (ie. <code>apache2/*.log</code>) and the sudo events within <code>auth.log</code> (eg. via <code>grep sudo auth.log</code>).</p>

<p>Throughout the analysis, we are attempting to follow the scientific method (eg. see the <%= link_to "Handbook of Digital Forensics and Investigation", "http://www.elsevierdirect.com/product.jsp?isbn=9780123742674" %> by Eoghan Casey) and to utilise data visualisation techniques (eg. see <%= link_to "Applied Security Visualisation", "http://www.informit.com/store/product.aspx?isbn=0321510100" %> by Raffael Marty and <%= link_to "Security Data Visualisation", "http://nostarch.com/securityvisualization.htm" %> by Greg Conti) to mine our (restricted) data set for as much forensic data as is realistically possible.</p>

<p>In addition to our attempt at answering this challenge (see below), we have also provided access to our investigative or research <%= link_to "notes", "/research" %>. IMHO, our self-imposed data restrictions make these research <%= link_to "notes", "/research" %> better reading than our challenge answers!</p>

<p>We have chosen here to build a Rails 3 application (running on top of Ruby 1.9.2 RC2 within a RVM environment) to offer a visual and interactive web report. All report graphing is performed using <%= link_to "Protovis 3.2", "http://vis.stanford.edu/protovis/" %>. All analysis has been performed using an Ubuntu 10.04 operating system. We have made the code for this application available on <%= link_to "GitHub", "http://github.com/carlpulley/log_mysteries" %>.</p>

<p>All log data has been parsed and processed using Rake tasks and then loaded into various Rail's models (eg. for each log file, we have an associated model). The automatic generation of CSV data in the research appendices allows readers to independently analyse data sets outside of this Rails application. When an analysis results in some form of output data, we have used rake tasks to tag (via the <i>acts as taggable on</i> plugin) that data within the analysis view.</p>

<p>Currently, we have used unit testing (via <%= link_to "shoulda", "http://github.com/thoughtbot/shoulda" %>) to perform any hash based verification of downloaded files. Integration testing (with SHA1 hashing) is used to ensure that all downloadable files (eg. CSV data sets) are identical to those used in producing the original report. In doing this, we are trying to ensure that our results (and so conclusions) are verifiably repeatable by other parties (cf. preserving a chain of evidence).</p>
	
<h3>Challenge Answers</h3>

<ol>
	<li><i>Was the system compromised and when? How do you know that for sure?</i> 
		<div class="note">
		<h3>Notes:</h3>
		<ul><li>Prior to answering this question, we have tagged our Auth model entries.</li><li>Unless otherwise mentioned, all times here refer to the log event timestamps.</li></ul>
		</div>
		We believe that the system was initially compromised before 23:21:08 on the 19th April 2010 PDT. This assertion is based on: 
		<ul>
			<li>the presence of the <code>psybnc</code> and <code>eggdrop</code> sudo entries in <code>auth.log</code> - both of these tools are known IRC bot components (see <%= link_to "botnet events", "/research/by?tagged=botnet" %>);</li>
			<li>the non-standard username <code>dhg</code> - all other usernames match the pattern <code>user\d+</code> (see <%= link_to "odd user events", "/research/by?tagged=odd,user" %>);</li>
			<li>the fact that <code>auth.log</code> records the user <code>dhg</code> configuring the UFW firewall (and then IP Tables directly), at a time that is during a period when the server is estimated to have no ongoing maintenance (examination of the <%= link_to "install/build events", "/research/by?tagged=install" %> shows that from this time index onwards, no such events are associated with estimates of known administrator activity).</li>
		</ul>
		By examining our installation events (see <%= link_to "install events", "/research/by?tagged=install" %>), we additionally have that our system was probably compromised before 23:02:37 on the 19th April 2010 PDT (since root installed the Debian package <code>build-essential</code> at this time and this event occurs 23 minutes before botnet related activity).<br />
		As a result of the above, and using our <%= link_to "clock description", "/research/clocks/10.0.1.2" %> model, we estimate that (relative to our 10.0.1.2 reference clock) the system was compromised by 06:02:37 on the 20th April 2010 UTC [±0.1%].
<% timeline1 = ApplicationHelper::Timeline.new %>

<% timeline1.add_event("subversion events", Sudo.tagged_with("subversion")) %>
<% timeline1.add_event("maintenance events", Sudo.tagged_with("maintenance")) %>
<% timeline1.add_event("install/build events", Sudo.tagged_with("install")) %>
<% timeline1.add_event("apache2 events", Sudo.tagged_with("apache")) %>
<% timeline1.add_event("firewall events", Sudo.tagged_with("firewall")) %>
<% timeline1.add_event("botnet events", Sudo.tagged_with("botnet")) %>
<% timeline1.add_event("suspicious user events", Sudo.tagged_with(["odd", "user"])) %>

<%= render :partial => '/graph/timeline', :object => timeline1 %>
	</li>
	<li><i>If the system was compromised, what was the method used?</i><br />
		?</li>
	<li><i>Can you locate how many attackers failed? If some succeeded, how many were they? How many stopped attacking after the first success?</i><br />
		?</li>
	<li><i>What happened after the brute force attack?</i><br />
		?</li>
	<li><i>Locate the authentication logs, was a bruteforce attack performed? If yes how many?</i><br />
		?<br />
	If we take the view that a sustained brute force attack might result in notable resource consumption (and so observable server loading), then we may use a timeline plot of our various server loading estimates (see our <%= link_to "research notes", "/research" %>) to estimate when we think that any brute force attacks might have occurred.<br />
	As we have already estimated that the system was compromised prior to 06:02:37 on the 20th April 2010 UTC [±0.1%], we analyse server loading estimates prior to this time index only.<br />
	Of the remaining events, we choose to filter out those loading estimates that occur at times consistent with Apache restarts. Thus, we rule out any loading estimates that occur in the time period 12:05:36 - 14:47:43 on the 19th April 2010 PDT.<br />
	This results in the following estimates for potential brute force attacks (all times occur on the 19th April 2010 PDT):
	<ul>
		<li>07:33:47</li>
		<li>08:30:12</li>
		<li>09:27:32</li>
		<li>10:25:05</li>
		<li>11:17:04-11:17:06</li>
		<li>11:19:00-11:19:07</li>
		<li>11:59:11-11:59:12</li>
		<li>17:48:12-17:48:13</li>
	</ul>
<% timeline2 = ApplicationHelper::Timeline.new %>

<% timeline2.add_event("server loading: transfer speed", ApacheAccess.tagged_with(["loading", "speed"])) %>
<% timeline2.add_event("server loading: static files", ApacheAccess.tagged_with(["loading", "files"])) %>
<% timeline2.add_event("server loading: newsfeed access", ApacheAccess.tagged_with(["loading", "rss"])) %>
<% timeline2.add_event("server loading: out of order events", ApacheAccess.tagged_with(["loading", "out-of-order"])) %>
<% timeline2.add_event("firewall events", Sudo.tagged_with("firewall")) %>
<% timeline2.add_event("botnet events", Sudo.tagged_with("botnet")) %>
<% timeline2.add_event("suspicious user events", Sudo.tagged_with(["odd", "user"])) %>
<% timeline2.add_event("mod unique ID anomaly", ApacheAccess.tagged_with(["anomaly", "unknown"])) %>
<% timeline2.add_event("apache restart estimates", ApacheAccess.tagged_with(["process", "restart"])) %>
<% timeline2.add_event("apache2 events", Sudo.tagged_with("apache")) %>
<% timeline2.add_event("apache2 errors", ApacheError.scoped) %>

<%= render :partial => '/graph/timeline', :object => timeline2 %>
	</li>
	<li><i>What is the timeline of significant events?</i><br />
	?<br />
	<i>How certain are you of the timing?</i><br />
	<%= link_to "10.0.1.2", "/research/web_server/rss/10.0.1.2"%> regularly accesses (via an RSS newsfeed) our web server at 10.0.1.14. These access intervals are so regular that, by trusting 10.0.1.2's system clock, we can build a <%= link_to "clock description", "/research/clocks/10.0.1.2" %> for 10.0.1.14 in terms of 10.0.1.2's trusted clock (for the current analysis, see <%= link_to "A Categorization of Computer Clocks", "http://www.infosec.jmu.edu/reports/jmu-infosec-tr-2009-001.php" %> by Glenn Henderson - our clock description only lacks the NTP time synchronisation behaviours here) with an accuracy of ±0.1%.
	</li>
	<li><i>Anything else that looks suspicious in the logs? Any misconfigurations? Other issues?</i><br />
		?</li>
	<li><i>Was an automatic tool used to perform the attack? If yes which one?</i><br />
		?</li>
	<li><i>What can you say about the attacker's goals and methods?</i><br />
		The presence of <code>eggdrop</code> and <code>psybnc</code> suggest that the attacker(s) plan to use this system as part of an IRC botnet.</li>
</ol>

<p><b>Bonus:</b> <i>What would you have done to avoid this attack?</i><br />
?</p>

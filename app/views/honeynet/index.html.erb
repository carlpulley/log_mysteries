<% content_for :note do %>
	<% admin_tags = ["admin::backup", "admin::configuring", "admin::file-distribution", "admin::login", "admin::monitoring", "admin::package-management", "admin::user-management"] -%>
	<% network_tags = ["network::client", "network::firewall", "network::scanner", "network::server"] -%>
	<% security_tags = ["security::authentication", "security::cryptography", "security::firewall", "security::integrity"] -%>
	<% all_tags = admin_tags + network_tags + security_tags -%>

	<h3>Timeline of admin::*, network::* and security::* debtag events</h3>

	<% debtag_timeline = ApplicationHelper::Timeline.new -%>
	
	<% data = Sudo.scoped -%>
	
	<% admin_tags.each { |t| debtag_timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>
	<% network_tags.each { |t| debtag_timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>
	<% security_tags.each { |t| debtag_timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>

	<%= render :partial => '/graph/timeline', :object => debtag_timeline, :locals => { :tags => all_tags } %>
	<p>
	<b>Usage Notes:</b>
	<ul>
		<li>timeline cursor follows mouse (click to detach or reattach cursor to mouse when over the timeline)</li>
		<li>double click on a viewed log event to snap timeline cursor to that position</li>
		<li>log events are highlighted red when they are within 10 minutes of the timeline cursor position.</li>
	</ul>
	</p>
	
	<% ["/usr/bin/tee", "/etc/init.d/apache2", "/usr/bin/svn", "threats"].each do |tag| -%>
		<h3>Timeline of <%= tag %> events</h3>
		
		<% timeline = ApplicationHelper::Timeline.new -%>
		
		<% data = Sudo.tagged_with(tag) -%>
    	
		<% unless tag == "threats" -%>
		<% data.map { |e| $1.strip if e.message[:command] =~ /^#{tag} ([^ ]*)( |$)/ }.sort.uniq.each { |t| timeline.add_event(t, data.command(t)) } -%>
		<% else -%>
		<% admin_tags.each { |t| timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>
		<% network_tags.each { |t| timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>
		<% security_tags.each { |t| timeline.add_event(t, data.tagged_with(t)) unless data.tagged_with(t).empty? } -%>
		<% end -%>
    	
		<%= render :partial => '/graph/timeline', :object => timeline, :locals => { :tags => all_tags } %>
		
		<% if tag == "/usr/bin/tee" -%>
		<p>
			<b>Notes:</b>
			<ul>
				<li>custom Django application being used?</li>
				<li>tee used to instrument and monitor the Django application?</li>
				<li>3 absolute paths to files are accessed by tee: <code>/opt/software/web/app/profile/fixtures/domain.json</code>; <code>/etc/hosts</code>; and <code>/etc/apache2/sites-enabled/001-www</code> (does this provide evidence of user input tainting via the Django application?)</li>
			</ul>
		</p>
		<% elsif tag == "/usr/bin/svn" -%>
		<p>
			<b>Notes:</b>
			<ul>
				<li>break sessions using tty and pwd as a context change marker?</li>
			</ul>
		</p>
		<% elsif tag == "threats" -%>
		<p>
		<b>Notes:</b>
		<ul>
			<li>we have two behavioural contexts here: first is part of a configuration/build phase (ie. initial part of <i>maintaining access</i> attack phase); second is part of a <i>maintaining access</i> attack phase</li>
			<li>both attack phases use different pseudo-terminals and so occur during distinct user sessions</li>
			<li>data is suggestive of second session being evidence of some backdoor being used to gain access?</li>
			<li>second session shows evidence of attacker trying to open up backdoor telnet listeners on ports 303 and 2685</li>
			<li>first session shows 2 directory changes (ie. context changes): psybnc -&gt; eggdrop1.6.19; eggdrop1.6.19 -&gt; eggdrop</li>
			<li>first session context changes suggest that attacker has difficulty setting up psybnc and so falls over to using eggdrop (version 1.6.19)</li>
			<li>could first session provide evidence of the attacker using a rootkit? Could we fingerprint the rootkit being used?</li>
		</ul>
		</p>
		<% end -%>
	<% end -%>
<% end %>

<% content_for :data do %>
<%
	def map_to_hash(data)
	  data.map { |d| { :pid => d.pid, :observed_at => d.observed_at.to_f, :thread_index => (d.thread_index || 0), :counter => d.counter } }
	end
-%>
	<script>
		var raw_data = <%=raw (map_to_hash @data).to_json %>;
	</script>
<% end %>

<% content_for :note do %>
	<% timeline = ApplicationHelper::Timeline.new -%>
	<% threads = ApacheAccess.all.map { |d| d.thread_index }.compact.uniq.sort -%>
	<% threads.each do |tid| -%>
		<% thread_timeline = ApacheAccess.where(:thread_index => tid) -%>
		<% timeline.add_event("TID: #{tid}", thread_timeline) { |d| thread_timeline.where(:pid => d.pid).where("observed_at > ?", d.observed_at.to_i).order(:observed_at).last.observed_at.to_f } -%>
	<% end -%>
	<% ["restart", "stop", "start"].each { |act| timeline.add_event("/etc/init.d/apache2 #{act}", Sudo.command("/etc/init.d/apache2 #{act}").where(:observed_at => Time.strptime("2010-04-18 00:00:00 UTC", "%Y-%m-%d %H:%M:%S %z")..Time.strptime("2010-04-26 00:00:00 UTC", "%Y-%m-%d %H:%M:%S %z"))) } -%>
	<% timeline.add_event("/usr/bin/killall apache2", Sudo.command("/usr/bin/killall").command("apache2").where(:observed_at => Time.strptime("2010-04-18 00:00:00 UTC", "%Y-%m-%d %H:%M:%S %z")..Time.strptime("2010-04-26 00:00:00 UTC", "%Y-%m-%d %H:%M:%S %z"))) -%>

	<%= render :partial => '/graph/timeline', :object => timeline %>
	
	<p>
		<b>Notes:</b>
		<ul>
			<li>solid areas of thread timelines encode periods over which the worker thread's PID remains stable or constant</li>
		</ul>
	</p>
<% end %>